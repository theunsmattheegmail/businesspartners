import { ODataRequest } from '../request/odataRequest';
import { EntitySet, EntityType, Action, Property } from '@sap-ux/annotation-converter';
import { FileBasedMockData, KeyDefinitions } from './fileBasedMockData';
import { DataAccessInterface, EntitySetInterface } from './common';
/**
 *
 */
export declare class MockDataEntitySet implements EntitySetInterface {
    /**
     * @param mockDataRootFolder
     * @param entity
     * @param generateMockData
     * @param isDraft
     */
    static read(mockDataRootFolder: string, entity: string, generateMockData: boolean, isDraft: boolean, dataAccess: DataAccessInterface): Promise<object[]>;
    protected _rootMockData: object[];
    private _rootMockDataFn;
    protected contextBasedMockData: Record<string, FileBasedMockData>;
    readyPromise: Promise<MockDataEntitySet>;
    protected entitySetDefinition: EntitySet | null;
    protected entityTypeDefinition: EntityType;
    protected dataAccess: DataAccessInterface;
    /**
     * @param rootFolder
     * @param entitySetDefinition
     * @param dataAccess
     * @param generateMockData
     * @param initializeMockData
     * @param isDraft
     */
    constructor(rootFolder: string, entitySetDefinition: EntitySet | EntityType, dataAccess: DataAccessInterface, generateMockData: boolean, initializeMockData?: boolean, isDraft?: boolean);
    /**
     * @param contextId
     */
    getMockData(contextId: string): FileBasedMockData;
    /**
     * @param keyValues
     * @param dataLine
     * @param keyDefinition
     */
    protected checkKeys(keyValues: KeyDefinitions, dataLine: object, keyDefinition: Property[]): boolean;
    /**
     * @param filterExpression
     * @param mockData
     * @param allData
     */
    protected checkSpecificProperties(filterExpression: any, mockData: any, allData: any): boolean | null;
    /**
     *
     */
    isV4(): boolean;
    getProperty(identifier: any): any;
    /**
     * @param mockData
     * @param filterExpression
     * @param tenantId
     */
    checkFilter(mockData: object, filterExpression: any, tenantId: string): boolean;
    checkSimpleExpression(filterExpression: any, mockData: any, tenantId: string): boolean;
    /**
     * @param mockData
     * @param searchQueries
     */
    checkSearch(mockData: object, searchQueries: string[]): boolean;
    /**
     * @param mockData
     * @param keyValues
     * @param keyName
     * @param keyProp
     */
    checkKeyValue(mockData: object, keyValues: object, keyName: string, keyProp?: Property): boolean;
    /**
     * @param dataLine
     */
    getKeys(dataLine: object): Record<string, string | number | boolean>;
    /**
     * @param keyValues
     */
    protected prepareKeys(keyValues: KeyDefinitions): KeyDefinitions;
    /**
     * @param keyValues
     * @param asArray
     * @param tenantId
     * @param dontClone
     */
    performGET(keyValues: KeyDefinitions, asArray: boolean, tenantId: string, dontClone?: boolean): any;
    /**
     * @param keyValues
     * @param postData
     * @param tenantId
     */
    performPOST(keyValues: KeyDefinitions, postData: object, tenantId: string, updateParent?: boolean): Promise<any>;
    /**
     * @param keyValues
     * @param patchData
     * @param tenantId
     */
    performPATCH(keyValues: KeyDefinitions, patchData: object, tenantId: string, updateParent?: boolean): Promise<any>;
    /**
     * @param keyValues
     * @param tenantId
     */
    performDELETE(keyValues: KeyDefinitions, tenantId: string, updateParent?: boolean): Promise<void>;
    /**
     * @param actionDefinition
     * @param actionData
     * @param odataRequest
     * @param keys
     */
    executeAction(actionDefinition: Action, actionData: object, odataRequest: ODataRequest, keys: Record<string, any>): Promise<any>;
    getParentEntityInterface(tenantId: string): Promise<FileBasedMockData>;
    getEntityInterface(entitySet: string, tenantId: string): Promise<FileBasedMockData>;
}
