import { ComplexType, Property, EntityType } from '@sap-ux/annotation-converter';
import { Action } from '@sap-ux/vocabularies-types';
import { EntitySetInterface } from './common';
export declare type KeyDefinitions = Record<string, number | boolean | string>;
/**
 *
 */
export declare class FileBasedMockData {
    protected _mockData: object[];
    protected _entityType: EntityType;
    protected _mockDataEntitySet: EntitySetInterface;
    protected _contextId: string;
    /**
     * @param mockData
     * @param entityType
     * @param mockDataEntitySet
     */
    constructor(mockData: object[], entityType: EntityType, mockDataEntitySet: EntitySetInterface, contextId: string);
    /**
     * @param mockEntry
     */
    addEntry(mockEntry: any): void;
    /**
     * @param keyValues
     * @param updatedData
     */
    updateEntry(keyValues: KeyDefinitions, updatedData: object): void;
    /**
     * @param keyValues
     */
    fetchEntries(keyValues: KeyDefinitions): object[];
    /**
     * @param keyValues
     */
    hasEntry(keyValues: KeyDefinitions): boolean;
    /**
     *
     */
    hasEntries(): boolean;
    /**
     *
     */
    getAllEntries(dontClone?: boolean): object[];
    /**
     * @param keyValues
     */
    protected getDataIndex(keyValues: KeyDefinitions): number;
    /**
     * @param keyValues
     */
    removeEntry(keyValues: KeyDefinitions): void;
    /**
     * @param type
     * @param complexType
     * @param defaultValue
     */
    protected getDefaultValueFromType(type: string, complexType: ComplexType, defaultValue?: any): any;
    /**
     * @param type
     * @param complexType
     * @param propertyName
     * @param lineIndex
     */
    protected getRandomValueFromType(type: string, complexType: ComplexType, propertyName: string, lineIndex: number): any;
    /**
     *
     */
    getEmptyObject(): object;
    /**
     *
     */
    getDefaultElement(): object;
    /**
     * @param property
     * @param lineIndex
     */
    generateKey(property: Property, lineIndex?: number, mockData?: any): any;
    /**
     * @param iIndex
     */
    generateMockDataLine(iIndex: number, mockData: any): {};
    getParentEntityInterface(): Promise<FileBasedMockData | undefined>;
    getEntityInterface(entitySetName: string): Promise<FileBasedMockData | undefined>;
    /**
     *
     */
    generateMockData(): any[];
    /**
     * Allow to modify the action data beforehand
     *
     * @param actionDefinition
     * @param actionData
     * @param keys
     */
    onBeforeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): Promise<object>;
    /**
     * Do something with the action
     *
     * @param actionDefinition
     * @param actionData
     * @param keys
     */
    executeAction(actionDefinition: Action, actionData: any, keys: Record<string, any>): Promise<object>;
    /**
     * Allow to modify the response data
     *
     * @param actionDefinition
     * @param actionData
     * @param keys
     * @param responseData
     */
    onAfterAction(actionDefinition: Action, actionData: any, keys: Record<string, any>, responseData: any): Promise<any>;
    onAfterUpdateEntry(keyValues: KeyDefinitions, updatedData: object): Promise<void>;
    onBeforeUpdateEntry(keyValues: KeyDefinitions, updatedData: object): Promise<void>;
    hasCustomAggregate(customAggregateName: string): boolean;
    performCustomAggregate(customAggregateName: string, dataToAggregate: any[]): any;
}
